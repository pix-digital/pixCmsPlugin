<?php

/**
 * PluginMenu
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class PluginMenu extends BaseMenu
{
    const DISABLED = 0;
    const ENABLED = 1;

    public function __toString()
    {
        return $this->label;
    }

    public function getRouteFromSlug($parameters = array())
    {

        // if a matching route is found get it
        if (substr($this->slug, 0, 1) == '@') {
            $route = $this->slug;
        }
        else { // build the default CMS route
            $route = '@pix_page';
            $slug = $this->getSlug();
            /*
            if($this->getNode()->hasChildren()){
                $slug = $this->getNode()->getFirstChild()->slug;
            }*/

            $parameters = array_merge($parameters, array('slug' => $slug));
        }

        // add params
        $params = array();
        foreach ($parameters as $key => $value)
        {
            $params[] = $key . '=' . $value;
        }

        // sort to guaranty unicity
        sort($params);

        $params = $params ? '?' . implode('&', $params) : '';

        // return route
        return $route . $params;
    }

    public function getParentId()
    {
        $node = $this->getNode();

        if (!$node->isValidNode() || $node->isRoot()) {
            return null;
        }

        $parent = $node->getParent();

        return $parent['id'];
    }

    public function getIndentedName()
    {
        return str_repeat('-', $this->getLevel()) . ' ' . $this->getLabel() . ($this->getLevel() == 0 ? ' (' . $this->getSlug() . ')' : null);
    }

    public function getFullPathLabel()
    {
        if ($this->getNode()->hasParent() && $this->getNode()->getParent()->getLevel() > 0) {
            return $this->getNode()->getParent() . ' &bull; ' . $this->label;
        }

        return $this->label;
    }

    public function isEnabled()
    {
        return ($this->getEnabled() == self::ENABLED) ? true : false;
    }

    /* fonction alias */
    public function getChildren()
    {
        return $this->getNode()->getChildren();
    }
}